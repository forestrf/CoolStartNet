var DOC = 
{"objects":[{"name":"API","description":"Set of functions that allows the use of the web database, widget control on the screen and more","fast_description":"Set of functions that allows the use of the web database, widget control on the screen and more","objects":[{"name":"storage","description":"Objects and functions to manage the browser and server database to set and get variables","fast_description":"Objects and functions to manage the browser and server database to set and get variables","objects":[{"name":"localStorage","description":"functions to manage (set, get and delete) data from the browser localStorage.\nThe browser localStorage can be accessed and modified by every widget. It means that this data can't be trusted.\n\nKeys in the database are stored as `widgetID-key` to prevent problems with different widgets having the same key.","fast_description":"Functions to manage data from the browser localStorage.","static functions":[{"name":"get","return":"object","parameters":[{"name":"key","type":"string","explanation":"String key to search on the database"},{"name":"callback","type":"function","default":"function(data){}","explanation":"The function takes the object from the database as a parameter"}],"fast_description":"Get the value corresponding to `key` stored in the browser localStorage","description":"Get the value corresponding to `key` stored in the browser localStorage.\n\n`callback` takes as parameter a variable when there is data stored for the key or `null` when there is no data stored for the key.\nThe object `data` is the same object saved by the [set function](#objects-API/objects-storage/objects-localStorage/static-functions-set).\n\nThe key is saved in the browser localStorage as `widgetID-key` to allow two or more widgets to have the same key name.\n\nReturns [API.storage.localStorage](#objects-API/objects-storage/objects-localStorage).\n\n\n```javascript\nAPI.storage.localStorage.get('some key', function(data){\n\tif(data !== null){\n\t\tconsole.log(data);\n\t} else {\n\t\tconsole.log('No data stored under this key');\n\t}\n});\n```"},{"name":"set","return":"object","description":"Set a value corresponding to `key` stored in the browser local Storage. The variable is saved as JSON internally and the JSON is parsed when the variable is recovered, so this function can save objects.\n\n`callback` takes as parameter `true` or `false` depending if the operation was successful or not.\nThe object `data` can be recovered using the [get function](#objects-API/objects-storage/objects-localStorage/static-functions-get).\n\nThe key is saved in the browser localStorage as `widgetID-key` to allow two or more widgets to have the same key name.\n\nReturns [API.storage.localStorage](#objects-API/objects-storage/objects-localStorage).\n\n\n```javascript\nAPI.storage.localStorage.set('some key', 'some value', function(state){\n\tif(state){\n\t\tconsole.log('Saved');\n\t} else {\n\t\tconsole.log('Not saved');\n\t}\n});\n```","fast_description":"Set a value corresponding to `key` stored in the browser localStorage","parameters":[{"name":"key","type":"string","explanation":"String key to save on the database"},{"name":"data","type":"object","explanation":"Variable to save"},{"name":"callback","type":"function","default":"function(state){}","explanation":"The function takes `true`(data saved) or `false`(data not saved)"}]},{"name":"delete","return":"object","description":"Delete a key (with its value) from the browser local Storage.\n\n`callback` takes as parameter `true` or `false` depending if the operation was successful or not.\n\nReturns [API.storage.localStorage](#objects-API/objects-storage/objects-localStorage).\n\n\n```javascript\nAPI.storage.localStorage.delete('some key', function(state){\n\tif(state){\n\t\tconsole.log('Deleted');\n\t} else {\n\t\tconsole.log('Not deleted');\n\t}\n});\n```","fast_description":"Delete a `key` and its value stored in the browser localStorage","parameters":[{"name":"key","type":"string","explanation":"String key to delete from the database"},{"name":"callback","type":"function","default":"function(state){}","explanation":"The function takes `true`(data deleted) or `false`(data not deleted)"}]},{"name":"deleteAll","return":"object","description":"Deletes all the keys (with its values) from the browser local Storage that correspond to the widget.\n\n`callback` takes as parameter `true` or `false` depending if the operation was successful or not.\n\nReturns [API.storage.localStorage](#objects-API/objects-storage/objects-localStorage).\n\n\n```javascript\nAPI.storage.localStorage.deleteAll(function(state){\n\tif(state){\n\t\tconsole.log('All deleted');\n\t} else {\n\t\tconsole.log('All Not deleted');\n\t}\n});\n```","fast_description":"Deletes all `key` and its values stored in the browser localStorage","parameters":[{"name":"callback","type":"function","default":"function(state){}","explanation":"The function takes `true`(all data deleted) or `false`(all data not deleted)"}]},{"name":"exists","return":"object","description":"Checks if a key is present in the browser local Storage.\n\n`callback` takes as parameter `true` or `false` depending if the key is present or not.\n\nReturns [API.storage.localStorage](#objects-API/objects-storage/objects-localStorage).\n\n\n```javascript\nAPI.storage.localStorage.exists('some key', function(state){\n\tif(state){\n\t\tconsole.log('The key exists');\n\t} else {\n\t\tconsole.log('The key Not exists');\n\t}\n});\n```","fast_description":"Checks if `key` exists in the browser localStorage","parameters":[{"name":"key","type":"string","explanation":"String key to check if exists in database"},{"name":"callback","type":"function","default":"function(result){}","explanation":"The function takes `true`(the key exists) or `false`(the key not exists)"}]}]},{"name":"remoteStorage","description":"functions to manage (set, get and delete) data from the server database.\n\nThis data cannot be accessed (read or write) by other widgets. It works like a private server database.","fast_description":"Functions to manage data from the private server database. Only accessible by the current widget","static functions":[{"name":"get","return":"object","description":"Get the value corresponding to `key` stored in the private server database.\n\n`callback` takes as parameter a variable when there is data stored for the key or `null` when there is no data stored for the key.\nThe object `data` is the same object saved by the [set function](#objects-API/objects-storage/objects-remoteStorage/static-functions-set).\n\nThe key is saved in the server database and cannot be accessed by other widgets.\n\nReturns [API.storage.remoteStorage](#objects-API/objects-storage/objects-remoteStorage).\n\n\n```javascript\nAPI.storage.remoteStorage.get('some key', function(data){\n\tif(data !== null){\n\t\tconsole.log(data);\n\t} else {\n\t\tconsole.log('No data stored under this key');\n\t}\n});\n```","fast_description":"Get the value corresponding to `key` stored in the private server database","parameters":[{"name":"key","type":"string","explanation":"String key to search on the database"},{"name":"callback","type":"function","default":"function(data){}","explanation":"The function takes the object from the database as a parameter"}]},{"name":"set","return":"object","description":"Set a value corresponding to `key` stored in the private server database. The variable is saved as JSON internally and the JSON is parsed when the variable is recovered, so this function can save objects.\n\n`callback` takes as parameter `true` or `false` depending if the operation was successful or not.\nThe object `data` can be recovered using the [get function](#objects-API/objects-storage/objects-remoteStorage/static-functions-get).\n\n\nThe key is saved in the server database and cannot be accessed by other widgets.\n\nReturns [API.storage.remoteStorage](#objects-API/objects-storage/objects-remoteStorage).\n\n\n```javascript\nAPI.storage.remoteStorage.set('some key', 'some value', function(state){\n\tif(state){\n\t\tconsole.log('Saved');\n\t} else {\n\t\tconsole.log('Not saved');\n\t}\n});\n```","fast_description":"Set a value corresponding to `key` stored in the private server database","parameters":[{"name":"key","type":"string","explanation":"String key to save on the database"},{"name":"data","type":"object","explanation":"Variable to save"},{"name":"callback","type":"function","default":"function(state){}","explanation":"The function takes `true`(data saved) or `false`(data not saved)"}]},{"name":"delete","return":"object","description":"Delete a key (with its value) from the private server database.\n\n`callback` takes as parameter `true` or `false` depending if the operation was successful or not.\n\nReturns [API.storage.remoteStorage](#objects-API/objects-storage/objects-remoteStorage).\n\n\n```javascript\nAPI.storage.remoteStorage.delete('some key', function(state){\n\tif(state){\n\t\tconsole.log('Deleted');\n\t} else {\n\t\tconsole.log('Not deleted');\n\t}\n});\n```","fast_description":"Delete a `key` and its value stored in the private server database","parameters":[{"name":"key","type":"string","explanation":"String key to delete from the database"},{"name":"callback","type":"function","default":"function(state){}","explanation":"The function takes `true`(data deleted) or `false`(data not deleted)"}]},{"name":"deleteAll","return":"object","description":"Deletes all the keys (with its values) from the private server database that correspond to the widget.\n\n`callback` takes as parameter `true` or `false` depending if the operation was successful or not.\n\nReturns [API.storage.remoteStorage](#objects-API/objects-storage/objects-remoteStorage).\n\n\n```javascript\nAPI.storage.remoteStorage.deleteAll(function(state){\n\tif(state){\n\t\tconsole.log('All deleted');\n\t} else {\n\t\tconsole.log('All Not deleted');\n\t}\n});\n```","fast_description":"Deletes all `key` and its values stored in the private server database","parameters":[{"name":"callback","type":"function","default":"function(state){}","explanation":"The function takes `true`(all data deleted) or `false`(all data not deleted)"}]},{"name":"exists","return":"object","description":"Checks if a key is present in the private server database.\n\n`callback` takes as parameter `true` or `false` depending if the key is present or not.\n\nReturns [API.storage.remoteStorage](#objects-API/objects-storage/objects-remoteStorage).\n\n\n```javascript\nAPI.storage.remoteStorage.exists('some key', function(state){\n\tif(state){\n\t\tconsole.log('The key exists');\n\t} else {\n\t\tconsole.log('The key Not exists');\n\t}\n});\n```","fast_description":"Checks if `key` exists in the private server database","parameters":[{"name":"key","type":"string","explanation":"String key to check if exists in database"},{"name":"callback","type":"function","default":"function(state){}","explanation":"The function takes `true`(the key exists) or `false`(the key not exists)"}]}]},{"name":"sharedStorage","description":"functions to manage (set, get and delete) data from the server database.\n\nThis data can be accessed (read or write) by other widgets. It works like a shared server database.","fast_description":"Functions to manage data from the shared server database. Accessible by all the widgets","static functions":[{"name":"get","return":"object","description":"Get the value corresponding to `key` stored in the shared server database.\n\n`callback` takes as parameter a variable when there is data stored for the key or `null` when there is no data stored for the key.\nThe object `data` is the same object saved by the [set function](#objects-API/objects-storage/objects-sharedStorage/static-functions-set).\n\nThe key is saved in the server database and can be accessed by other widgets.\n\nReturns [API.storage.sharedStorage](#objects-API/objects-storage/objects-sharedStorage).\n\n\n```javascript\nAPI.storage.sharedStorage.get('some key', function(data){\n\tif(data !== null){\n\t\tconsole.log(data);\n\t} else {\n\t\tconsole.log('No data stored under this key');\n\t}\n});\n```","fast_description":"Get the value corresponding to `key` stored in the shared server database","parameters":[{"name":"key","type":"string","explanation":"String key to search on the database"},{"name":"callback","type":"function","default":"function(data){}","explanation":"The function takes the object from the database as a parameter"}]},{"name":"set","return":"object","description":"Set a value corresponding to `key` stored in the shared server database. The variable is saved as JSON internally and the JSON is parsed when the variable is recovered, so this function can save objects.\n\n`callback` takes as parameter `true` or `false` depending if the operation was successful or not.\nThe object `data` can be recovered using the [get function](#objects-API/objects-storage/objects-sharedStorage/static-functions-get).\n\n\nThe key is saved in the server database and can be accessed by other widgets.\n\nReturns [API.storage.sharedStorage](#objects-API/objects-storage/objects-sharedStorage).\n\n\n```javascript\nAPI.storage.sharedStorage.set('some key', 'some value', function(state){\n\tif(state){\n\t\tconsole.log('Saved');\n\t} else {\n\t\tconsole.log('Not saved');\n\t}\n});\n```","fast_description":"Set a value corresponding to `key` stored in the shared server database","parameters":[{"name":"key","type":"string","explanation":"String key to save on the database"},{"name":"data","type":"object","explanation":"Variable to save"},{"name":"callback","type":"function","default":"function(state){}","explanation":"The function takes `true`(data saved) or `false`(data not saved)"}]},{"name":"delete","return":"object","description":"Delete a key (with its value) from the shared server database.\n\n`callback` takes as parameter `true` or `false` depending if the operation was successful or not.\n\nReturns [API.storage.sharedStorage](#objects-API/objects-storage/objects-sharedStorage).\n\n\n```javascript\nAPI.storage.sharedStorage.delete('some key', function(state){\n\tif(state){\n\t\tconsole.log('Deleted');\n\t} else {\n\t\tconsole.log('Not deleted');\n\t}\n});\n```","fast_description":"Delete a `key` and its value stored in the shared server database","parameters":[{"name":"key","type":"string","explanation":"String key to delete from the database"},{"name":"callback","type":"function","default":"function(state){}","explanation":"The function takes `true`(data deleted) or `false`(data not deleted)"}]},{"name":"exists","return":"object","description":"Checks if a key is present in the shared server database.\n\n`callback` takes as parameter `true` or `false` depending if the key is present or not.\n\nReturns [API.storage.sharedStorage](#objects-API/objects-storage/objects-sharedStorage).\n\n\n```javascript\nAPI.storage.sharedStorage.exists('some key', function(state){\n\tif(state){\n\t\tconsole.log('The key exists');\n\t} else {\n\t\tconsole.log('The key Not exists');\n\t}\n});\n```","fast_description":"Checks if `key` exists in the private server database","parameters":[{"name":"key","type":"string","explanation":"String key to check if exists in database"},{"name":"callback","type":"function","default":"function(state){}","explanation":"The function takes `true`(the key exists) or `false`(the key not exists)"}]}]}]},{"name":"widget","description":"Objects and functions to manage (create, move, add classes, etc.) widgets on the screen","fast_description":"Objects and functions to manage (create, move, add classes, etc.) widgets on the screen","static functions":[{"name":"create","return":"object","description":"Creates a div object, appends it to the document and adds functions to manage it.\n\nreturns an htmlElement with extra [functions](#objects-API/objects-widget)\n\n```javascript\nvar widget = API.widget.create();\n```","fast_description":"Create a widget in the screen."},{"name":"linkMyCSS","return":"object","description":"Create a link `text/css` element with the specified widget file and append it to the document.\n\nThis only works if the parameter `name`:\n\n* Is the same as one of the widget files.\n* The file is a css (was uploaded with a css extension).\n\nreturns [API.widget](#objects-API/objects-widget)\n\n```javascript\nAPI.widget.linkMyCSS(\"somefile.css\");\n```","fast_description":"Create a link `text/css` element with a widget css file","parameters":[{"name":"name","type":"string","explanation":"Filename of the css to append. Must be a file of the widget"}]},{"name":"linkExternalCSS","return":"object","description":"Create a link `text/css` element with the specified URI and append it to the document.\n\nreturns [API.widget](#objects-API/objects-widget)\n\n```javascript\nAPI.widget.linkMyCSS(\"http://path/to/file.css\");\n```","fast_description":"Create a link `text/css` element with a URI","parameters":[{"name":"name","type":"string","explanation":"URI of the css to append"}]}],"functions":[{"name":"hide","return":"object","description":"Makes the widget invisible by setting `style.display = 'none'`.\n\nReturns the htmlElement.\n\n```javascript\nvar widget = API.widget.create();\n\nwidget.hide();\n```","fast_description":"Hide the widget"},{"name":"unHide","return":"object","description":"Makes the widget visible by setting `style.display = ''` to revert it.\n\nReturns the htmlElement.\n\n```javascript\nvar widget = API.widget.create();\n\nwidget.unHide();\n```","fast_description":"Show a hidden widget"},{"name":"setPosition","return":"object","description":"Set the left and top separation of the widget from the window in percentage relative to the window.\n\nReturns the htmlElement.\n\n```javascript\nvar widget = API.widget.create();\n\nvar left = 20;\nvar top  = 30;\n\nwidget.setPosition(left ,top);\n```","fast_description":"Set the position of the widget","parameters":[{"name":"left","type":"float","explanation":"Distance in percentage from the left border relative to the window"},{"name":"top","type":"float","explanation":"Distance in percentage from the top border relative to the window"}]},{"name":"getPosition","return":"object","description":"Get the left and top separation of the widget from the window in percentage relative to the window.\n\nReturns a object with two parameters: `left` and `top`.\n\n```javascript\nvar widget = API.widget.create();\n\n// We first give a position to the widget\nwidget.setPosition(20, 30);\n\nvar position = widget.getPosition();\n\nconsole.log(\"Widget position. Left: \" + position.left + \", Top: \" + position.top);\n```","fast_description":"Get the position of the widget","parameters":[{"name":"roundedTo","type":"int","default":"-1","explanation":"Truncate the number to the indicated decimals. -1 to skip truncation"}]},{"name":"setSize","return":"object","description":"Set the width and the height of the widget in percentage relative to the window.\n\nReturns the htmlElement.\n\n```javascript\nvar widget = API.widget.create();\n\nvar width  = 40;\nvar height = 50;\n\nwidget.setSize(width, height);\n```","fast_description":"Set the size of the widget","parameters":[{"name":"width","type":"float","explanation":"Width in percentage relative to the window"},{"name":"height","type":"float","explanation":"Height in percentage relative to the window"}]},{"name":"getSize","return":"object","description":"Get the width and the height of the widget in percentage relative to the window.\n\nReturns a object with two parameters: `width` and `height`.\n\n```javascript\nvar widget = API.widget.create();\n\n// We first give a size to the widget\nwidget.setSize(40, 50);\n\nvar size = widget.getSize();\n\nconsole.log(\"Widget size. Width: \" + size.width + \", Height: \" + size.height);\n```","fast_description":"Get the size of the widget","parameters":[{"name":"roundedTo","type":"int","default":"-1","explanation":"Truncate the number to the indicated decimals. -1 to skip truncation"}]},{"name":"setPositionSize","return":"object","description":"Set the position and the size of the widget.\nThis functions calls the functions [setPosition](#objects-API/objects-widget/functions-setPosition) and [setSize](#objects-API/objects-widget/functions-setSize)\n\nReturns the htmlElement.\n\n```javascript\nvar widget = API.widget.create();\n\nvar left   = 20;\nvar top\t= 30;\nvar width  = 40;\nvar height = 50;\n\nwidget.setPositionSize(left, top, width, height);\n```","fast_description":"Set the position and the size of the widget","parameters":[{"name":"left","type":"float","explanation":"Distance in percentage from the left border relative to the window"},{"name":"top","type":"float","explanation":"Distance in percentage from the top border relative to the window"},{"name":"width","type":"float","explanation":"Width in percentage relative to the window"},{"name":"height","type":"float","explanation":"Height in percentage relative to the window"}]},{"name":"getPositionSize","return":"object","description":"Get the position and the size of the widget.\nThis functions calls the functions [getPosition](#objects-API/objects-widget/functions-getPosition) and [getSize](#objects-API/objects-widget/functions-getSize)\n\nReturns a object with four parameters: `left`, `top`, `width` and `height`.\n\n```javascript\nvar widget = API.widget.create();\n\n// We first give a position and a size to the widget\nwidget.setPositionSize(20, 30, 40, 50);\n\nvar pr = widget.getSize();\n\nconsole.log(\"Widget position. Left: \" + pr.left+ \", Top: \" + pr.top);\nconsole.log(\"Widget size. Width: \" + pr.width + \", Height: \" + pr.height);\n```","fast_description":"Get the position and the size of the widget","parameters":[{"name":"roundedTo","type":"int","default":"-1","explanation":"Truncate the number to the indicated decimals. -1 to skip truncation"}]},{"name":"addClass","return":"object","description":"Add a css class to the widget.\n\nReturns the htmlElement.\n\n```javascript\nvar widget = API.widget.create();\n\nwidget.addClass(\"myClass\");\n\nconsole.log(widget.className);\n```","fast_description":"Add a class to the widget","parameters":[{"name":"className","type":"string","explanation":"The class name of the css"}]},{"name":"removeClass","return":"object","description":"Remove a css class of the widget.\n\nReturns the htmlElement.\n\n```javascript\nvar widget = API.widget.create();\n\nwidget.addClass(\"myClass\");\n\nwidget.removeClass(\"myClass\");\n\nconsole.log(widget.className);\n```","fast_description":"Remove a class of the widget","parameters":[{"name":"className","type":"string","explanation":"The class name of the css"}]}]},{"name":"document","description":"Custom document object","fast_description":"Custom document object","static functions":[{"name":"createElement","return":"object","description":"Same as `document.createElement` but implements the [functions of widget](#objects-API/objects-widget).\n\n```javascript\nvar my_div = API.document.createElement(\"div\");\n\n// Function example\nmy_div.addClass(\"class_one\").addClass(\"class_two\");\n```","fast_description":"returns a new htmlElement with the [functions of widget](#objects-API/objects-widget)"}]},{"name":"bookmarks","description":"Bookmarks manager. It uses the bookmarks object from the database (or creates a new empty object to work with). This object is `bookmarks` and it is stored on the [sharedStorage](http://localhost/doc/reader.html#objects-API/objects-storage/objects-sharedStorage) to allow other widgets to manage the same bookmarks.\n\nThis object can manage the bookmarks object of the database with functions to list, add, move, edit and remove bookmarks and folders. The bookmarks database object can be retrieved at any time, be modified or uploaded to the server database and then you can set a new database object to the bookmarks object.\n\nTo manage the bookmarks a variable `path` is used to indicate the path where is the folder or bookmark. Paths are a sequence of folder names separated with `/`. Paths always are absolute and can start and end or not with the separator `/`. Paths can contain any character except `/`.\n\nThe root path is either `/` and a empty string. A folder called `my_folder` inside the root folder has the path `/my_folder/`, `/my_folder` and `my_folder`. A folder `one` inside a folder `two` inside the root folder has the path `/one/two/`, `/one/two` and `one/two`. The path indicates where the item (bookmark or folder) is inside.","fast_description":"Utilities to manage the bookmarks","static functions":[{"name":"createObject","return":"object","description":"Create a bookmarks object. This object is a wrapper for the bookmark object from the database that manages it with functions.\n\nTo save the modified bookmarks object in the database you need to retrieve the object with the [function getObject](#objects-API/objects-bookmarks/functions-getObject).\n\nReturns a [bookmarks object](#objects-API/objects-bookmarks).\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n```\n\nExample with the bookmarks object from the database\n\n```javascript\nvar bookmarks;\nAPI.storage.sharedStorage.get('bookmarks', function(data){\n\tif(data){\n\t\tbookmarks = API.bookmarks.createObject(data);\n\t} else {\n\t\tbookmarks = API.bookmarks.createObject();\n\t}\n\t\n\t// Do something with the bookmarks\n});\n```","fast_description":"Create a bookmarks object","parameters":[{"name":"bookmarks","type":"object","default":"{}","explanation":"bookmarks object from the database"}]}],"functions":[{"name":"getObject","return":"object","description":"Get the bookmarks database object from the bookmarks object. This object is the object saved and retrieved from the database.\n\nYou can change the database object of a bookmarks object with the [function setObject](#objects-API/objects-bookmarks/functions-setObject).\n\nReturns a database bookmarks object.\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\nvar database_bookmarks = bookmarks.getObject();\n```\n\nExample saving the bookmarks object in the database\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\nvar database_bookmarks = bookmarks.getObject();\n\nAPI.storage.sharedStorage.set('bookmarks', database_bookmarks, function(state){\n\tif(state){\n\t\tconsole.log(\"bookmarks saved\");\n\t} else {\n\t\tconsole.log(\"bookmarks NOT saved\");\n\t}\n});\n```","fast_description":"Get the bookmarks database object"},{"name":"setObject","return":"object","description":"Set the bookmarks database object for the bookmarks object. This object is the object saved and retrieved from the database.\n\nYou can retrieve the database object of a bookmarks object with the [function getObject](#objects-API/objects-bookmarks/functions-getObject).\n\nReturns the [bookmarks object](#objects-API/objects-bookmarks).\n\nExample saving the bookmarks object in the database\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n\nAPI.storage.sharedStorage.get('bookmarks', function(data){\n\tif(data){\n\t\tbookmarks.setObject(data);\n\t}\n\t\n\t// Do something with the bookmarks\n});\n```","fast_description":"Set the bookmarks database object","parameters":[{"name":"obj","type":"object","explanation":"The new database object for the bookmarks object"}]},{"name":"addBookmark","return":"object","description":"Add a new bookmark inside the specified folder with the `path`.\n\nThe bookmark can be added with only `path` and `uri`.\n\nReturns the [bookmarks object](#objects-API/objects-bookmarks).\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n\n// Create a bookmark inside the folder \"another folder\" that is inside \"folder\"\nbookmarks.addBookmark(\"folder/another folder\", \"http://someuri\");\n```","fast_description":"Create a bookmark in the specified path","parameters":[{"name":"path","type":"string","explanation":"Path where the bookmark will be inside of"},{"name":"uri","type":"string","explanation":"URI of the bookmark"},{"name":"title","type":"string","default":"\"\"","explanation":"Title of the bookmark"},{"name":"favicon_uri","type":"string","default":"\"\"","explanation":"URI of the favicon"}]},{"name":"addFolder","return":"object","description":"Add a new folder inside the specified folder with the `path`.\n\nReturns the [bookmarks object](#objects-API/objects-bookmarks).\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n\n// Create a folder inside the folder root folder\nbookmarks.addFolder(\"\", \"folder name\");\n```","fast_description":"Create a folder in the specified path","parameters":[{"name":"path","type":"string","explanation":"Path where the folder will be inside of"},{"name":"name","type":"string","explanation":"Name of the new folder"}]},{"name":"getBookmark","return":"object","description":"Get a bookmark inside the specified folder with the `path` and `index`.\n\nThe index can be retrieved from the [function getBookmarks](#objects-API/objects-bookmarks/functions-getBookmarks) and the [function getElements](#objects-API/objects-bookmarks/functions-getElements)\n\nReturns a object with three parameters: `uri`, `title` and `iconuri`, all of them strings.\n\n`iconuri` is the favicon url. `title` and `iconuri` can be empty strings.\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n// [...] operations with bookmarks\nvar index = 3;\n\n// Get the third element, a bookmark, inside the root folder\nvar bookmark = bookmarks.getBookmark(\"\", index);\n\nconsole.log(\"Bookmark uri: \" + bookmark.uri + \", title: \" + bookmark.title + \", favicon: \" + bookmark.iconuri);\n```","fast_description":"Get a bookmark from the specified path and index","parameters":[{"name":"path","type":"string","explanation":"Path where the bookmark is"},{"name":"index","type":"int","explanation":"Array index of the bookmark."}]},{"name":"getBookmarks","return":"array","description":"Get an array of bookmarks from the specified `path`.\n\nReturns an array of objects with four parameters: `index`, `uri`, `title` and `iconuri`. `index` is an int, `uri`, `title` and `iconuri` are strings.\n\nThe `index` is the int needed to use the functions [getBookmark](#objects-API/objects-bookmarks/functions-getBookmark), [removeBookmark](#objects-API/objects-bookmarks/functions-removeBookmark), [moveBookmark](#objects-API/objects-bookmarks/functions-moveBookmark) and [editBookmark](#objects-API/objects-bookmarks/functions-editBookmark).\n\n`iconuri` is the favicon url. `title` and `iconuri` can be empty strings.\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n// [...] operations with bookmarks\n\n// Get all the bookmarks inside the root folder\nvar bookmark = bookmarks.getBookmarks(\"\");\n\nfor(var i = 0; i < bookmark.length; i++){\n\tconsole.log(\"Bookmark index: \" + bookmark[i].index + \", uri: \" + bookmark[i].uri + \", title: \" + bookmark[i].title + \", favicon: \" + bookmark[i].iconuri);\n}\n```","fast_description":"Get an array of bookmarks from the specified path","parameters":[{"name":"path","type":"string","explanation":"Path where the bookmarks are"}]},{"name":"getFolders","return":"array","description":"Get an array of bookmarks from the specified `path`.\n\nReturns an array of objects with two parameters: `index` and `folder`. `index` is an int, `folder` is a string.\n\nThe `index` is no needed but can be used with the functions [removeFolder](#objects-API/objects-bookmarks/functions-removeFolder), [moveFolder](#objects-API/objects-bookmarks/functions-moveFolder), and [editFolder](#objects-API/objects-bookmarks/functions-editFolder).\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n// [...] operations with bookmarks\n\n// Get all the bookmarks inside the root folder\nvar folders = bookmarks.getFolders(\"\");\n\nfor(var i = 0; i < folders .length; i++){\n\tconsole.log(\"Folder index: \" + folders[i].index + \", folder name: \" + folders[i].folder);\n}\n```","fast_description":"Get an array of folders from the specified path","parameters":[{"name":"path","type":"string","explanation":"Path where the folders are"}]},{"name":"getElements","return":"array","description":"Get an array of bookmarks and folders from the specified `path`.\n\nReturns an array of objects with at least one parameter: `type`. `type` is a string. The extra parameters depends on the value of the variable `type`.\n\n* If `type === \"folder\"` there are one extra parameter: `folder`. `folder` is a string that contains the name of the folder.\n* If `type === \"bookmark\"` there are three extra parameters: `uri`, `title` and `iconuri`, all of them strings. `iconuri` is the favicon url. `title` and `iconuri` can be empty strings.\n* If `type === \"unknown\"` there is one extra parameter: `element`. It contains the object of unknown type.\n\nThe index corresponds to the array index. It can be needed with the functions to manage both bookmarks and folders.\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n// [...] operations with bookmarks\n\n// Get all the bookmarks inside the root folder\nvar elements = bookmarks.getElements(\"\");\n\nfor(var i = 0; i < folders .length; i++){\n\tconsole.log(\"Element type: \" + elements[i].type);\n\tswitch(elements[i].type){\n\t\tcase \"bookmark\":\n\t\t\tconsole.log(\"Bookmark index: \" + i + \", uri: \" + elements[i].uri);\n\t\tbreak;\n\t\tcase \"folder\":\n\t\t\tconsole.log(\"Folder index: \" + i + \", name: \" + elements[i].folder);\n\t\tbreak;\n\t\tcase \"unknown\":\n\t\t\tconsole.log(elements[i].element);\n\t\tbreak;\n\t}\n}\n```","fast_description":"Get an array of bookmarks and folders from the specified path","parameters":[{"name":"path","type":"string","explanation":"Path where the bookmarks and folders are"}]},{"name":"removeBookmark","return":"object","description":"Remove a bookmark from the specified folder with the `path` and `index`.\n\nThe index can be retrieved from the [function getBookmarks](#objects-API/objects-bookmarks/functions-getBookmarks) and the [function getElements](#objects-API/objects-bookmarks/functions-getElements)\n\nIf it is not a bookmark nothing will happen unless `force` is `true`.\n\nReturns the [bookmarks object](#objects-API/objects-bookmarks).\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n// [...] operations with bookmarks\nvar index = 3;\n\n// Remove the third element, a bookmark, from the root folder\nbookmarks.removeBookmark(\"\", index);\n```","fast_description":"Remove a bookmark from the specified path and index","parameters":[{"name":"path","type":"string","explanation":"Path where the bookmark is"},{"name":"index","type":"int","explanation":"Index of the bookmark in the array of elements"},{"name":"force","type":"bool","default":"false","explanation":"Force the removal if it is not a bookmark"}]},{"name":"removeFolder","return":"object","description":"Remove a folder from the specified folder with the `path` and `name_index`.\n\n`name_index` can be the name of the folder or the index of the folder.\n\nReturns the [bookmarks object](#objects-API/objects-bookmarks).\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n// [...] operations with bookmarks\nvar index = 3;\n\n// Remove the third element, a bookmark, from the root folder\nbookmarks.removeFolder(\"\", \"my folder\");\n```","fast_description":"Remove a folder from the specified path and index","parameters":[{"name":"path","type":"string","explanation":"Path where the folder is"},{"name":"name_index","type":"string/int","explanation":"Name of the folder or index of the folder"}]},{"name":"moveBookmark","return":"object","description":"Move a bookmark from `path_from` and `index_from` to `path_to` and `index_to`.\n\nIf it is not a bookmark nothing will happen unless `force` is `true`.\n\nReturns the [bookmarks object](#objects-API/objects-bookmarks).\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n// [...] operations with bookmarks\nvar index = 3;\n\n// Move the first bookmark inside of \"initial folder\" to the first position of the root folder\nbookmarks.moveBookmark(\"initial folder\", 0, \"\", 0);\n```","fast_description":"Move a bookmark from one folder and index to other folder and index","parameters":[{"name":"path_from","type":"string","explanation":"Path where the bookmark is"},{"name":"index_from","type":"int","explanation":"Index of the bookmark"},{"name":"path_to","type":"string","explanation":"Path where the bookmark will be moved"},{"name":"index_to","type":"int","explanation":"Future index of the bookmark"},{"name":"force","type":"bool","default":"false","explanation":"Force the move if it is not a bookmark"}]},{"name":"moveFolder","return":"object","description":"Move a folder from `path_from` and `name_index_from` to `path_to` and `index_to`.\n\n`name_index_from` can be a string, the name of the folder, or an int, the index of the folder.\n\nReturns the [bookmarks object](#objects-API/objects-bookmarks).\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n// [...] operations with bookmarks\nvar index = 3;\n\n// Move the folder with the name \"folder to move\" from \"folder container\" to the fifth position of the folder \"new folder\" that is inside of the folder \"path\", inside of the folder \"new\"\nbookmarks.moveFolder(\"folder container\", \"folder to move\", \"new/path/new folder\", 4);\n```","fast_description":"Move a folder from one folder and index to other folder and index","parameters":[{"name":"path_from","type":"string","explanation":"Path where the folder is"},{"name":"name_index_from","type":"string/int","explanation":"Name of the folder or index of the folder"},{"name":"path_to","type":"string","explanation":"Path where the folder will be moved"},{"name":"index_to","type":"int","explanation":"Future index of the folder"}]},{"name":"editBookmark","return":"object","description":"Edit the bookmark from `path` and `index` with new parameters.\n\nThe bookmark can be modified with only `path`, ìndex` and `uri`.\n\nReturns the [bookmarks object](#objects-API/objects-bookmarks).\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n\n// Edit a bookmark with index 5 inside the folder \"another folder\" that is inside \"folder\"\nbookmarks.editBookmark(\"folder/another folder\", 5, \"http://someuri\");\n```","fast_description":"Edit a bookmark from the specified path and index","parameters":[{"name":"path","type":"string","explanation":"Path where the bookmark is"},{"name":"index","type":"int","explanation":"Index of the bookmark"},{"name":"uri","type":"string","explanation":"new bookmark uri"},{"name":"title","type":"string","default":"\"\"","explanation":"new bookmark title"},{"name":"favicon_uri","type":"string","default":"\"\"","explanation":"new bookmark favicon uri"}]},{"name":"editFolder","return":"object","description":"Edit the folder from `path` and `old_name_index` with new parameters.\n\n`old_name_index` can be a string, the name of the folder, or an int, the index of the folder.\n\nReturns the [bookmarks object](#objects-API/objects-bookmarks).\n\n```javascript\nvar bookmarks = API.bookmarks.createObject();\n\n// Edit a folder with index 5 inside the folder \"another folder\" that is inside \"folder\"\nbookmarks.editFolder(\"folder/another folder\", 5, \"new name\");\n```","fast_description":"Edit a folder from the specified path and name or index","parameters":[{"name":"path","type":"string","explanation":"Path where the folder is"},{"name":"old_name_index","type":"string/int","explanation":"Name of the folder or index of the folder"},{"name":"new_name","type":"string","explanation":"New name of the folder"}]}]}]}]}

;

/*
"url": function(name){return getUrl(widgetID, name);}
*/